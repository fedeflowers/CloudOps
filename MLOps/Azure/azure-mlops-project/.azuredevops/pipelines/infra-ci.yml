trigger:
  branches:
    include: 
    - main

pr:
  branches:
    include: 
    - main

pool:
  name: 'Default'

variables:
  - group: dev_vars

stages:
- stage: CI
  displayName: Infra CI (validate & plan)
  jobs:
  - job: TerraformCI
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraformVersion)

    - task: TerraformTaskV4@4
      displayName: INIT
      inputs:
        provider: azurerm
        backendServiceArm: $(azureServiceConnection)
        backendAzureRmResourceGroupName: $(backendResourceGroup)
        backendAzureRmStorageAccountName: $(backendStorageAccount)
        backendAzureRmContainerName: $(backendContainer)
        backendAzureRmKey: $(backendKey)
        command: init
        workingDirectory: $(workingdir)

#unlock state if needed
    # - script: |
    #     set -e
    #     terraform init -input=false
    #     terraform force-unlock -force "5db31b9e-e804-693a-31bf-0f42ea8e3723" || true
    #   displayName: Terraform force-unlock (always)
    #   workingDirectory: $(workingdir)
          
    - task: TerraformTaskV4@4
      displayName: PLAN
      inputs:
        provider: azurerm
        command: plan
        environmentServiceNameAzureRM: $(azureServiceConnection)
        commandOptions: -out=tfplan -var-file="envs/$(environment)/terraform.tfvars"
        workingDirectory: $(workingdir)

    # Export human-readable JSON too 
    - task: PowerShell@2
      displayName: Export plan as JSON (optional)
      condition: and(succeeded(), exists('$(workingdir)\tfplan'))
      inputs:
        targetType: inline
        workingDirectory: $(workingdir)
        script: |
          terraform show -json tfplan > "$(Build.ArtifactStagingDirectory)\tfplan.json"

    # Collect the binary tfplan (Windows-safe)
    - task: PowerShell@2
      displayName: Collect plan artifact
      condition: and(succeeded(), exists('$(workingdir)\tfplan'))
      inputs:
        targetType: inline
        script: |
          New-Item -ItemType Directory -Force -Path "$(Build.ArtifactStagingDirectory)" | Out-Null
          Copy-Item -Path "$(workingdir)\tfplan" -Destination "$(Build.ArtifactStagingDirectory)\tfplan"

    # Publish only if we actually have something
    - publish: $(Build.ArtifactStagingDirectory)
      displayName: Publish plan artifact
      artifact: tfplan
      condition: and(succeeded(), or(exists('$(Build.ArtifactStagingDirectory)\tfplan'),
                                    exists('$(Build.ArtifactStagingDirectory)\tfplan.json')))

