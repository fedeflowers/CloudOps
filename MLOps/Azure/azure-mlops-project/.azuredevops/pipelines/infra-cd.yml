trigger: none

# Pull artifacts from your CI pipeline
resources:
  pipelines:
    - pipeline: ci
      source: <CI pipeline name here>   # e.g. Infra-CI
      branch: main                      # you can pick a different branch at run time in the UI

pool:
  vmImage: ubuntu-latest

variables:
  AML_WS: $(AML_WORKSPACE_NAME)
  AML_RG: $(RESOURCE_GROUP)

steps:
  # Get the exact repo commit used by the CI run
  - checkout: self
    persistCredentials: true

  - script: |
      set -e
      git fetch --all --prune
      echo "Checking out CI commit: $(resources.pipeline.ci.sourceCommit)"
      git checkout $(resources.pipeline.ci.sourceCommit)
      git rev-parse --short HEAD
    displayName: Checkout CI commit

  # Download artifacts produced by CI
  - download: ci
    artifact: tfplan
    displayName: Download tfplan artifact

  # Install Terraform (or use your existing task)
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: $(terraformVersion)
    displayName: Install Terraform

  # Init with the SAME backend config used in CI
  - task: TerraformTaskV4@4
    displayName: INIT
    inputs:
      provider: azurerm
      backendServiceArm: $(azureServiceConnection)
      backendAzureRmResourceGroupName: $(backendResourceGroup)
      backendAzureRmStorageAccountName: $(backendStorageAccount)
      backendAzureRmContainerName: $(backendContainer)
      backendAzureRmKey: $(backendKey)
      command: init
      workingDirectory: $(workingdir)

  # Apply the exact reviewed plan (no prompt when using a planfile)
  # When you save a Terraform tfplan file in CI, itâ€™s tied to:
  # The exact Terraform code & variables from that commit
  # The provider version used
  # The state at that moment
  # If your CD pipeline just grabs the plan file but runs against different code (e.g., main has since changed), Terraform will throw an error
  - script: |
      set -e
      PLAN_PATH="$(Pipeline.Workspace)/ci/tfplan/tfplan"
      echo "Applying saved plan: $PLAN_PATH"
      terraform apply "$PLAN_PATH"
    workingDirectory: $(workingdir)
    displayName: Terraform APPLY (saved plan)
