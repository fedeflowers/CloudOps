trigger:
  branches:
    include:
      - main
  paths:
    include:
      - MLOps/Azure/azure-mlops-project/ml/**
      - MLOps/Azure/azure-mlops-project/.azuredevops/pipelines/ml/**

stages:
  - stage: ML_CI
    displayName: "Machine Learning CI"
    jobs:
      - job: Build
        displayName: "Lint, test, and package ML code"
        pool:
          name: 'Default'
        steps:
          - powershell: |
              # Fail fast and show errors
              $ErrorActionPreference = 'Stop'

              # ---- Settings ----
              $ver  = '3.11.9'
              $url  = "https://www.python.org/ftp/python/$ver/python-$ver-embed-amd64.zip"
              $root = "$(Build.SourcesDirectory)"
              $dest = Join-Path $root ".python"
              $zip  = Join-Path $root "python-$ver.zip"

              Write-Host "Installing portable Python $ver into $dest"

              # Ensure TLS 1.2 for Invoke-WebRequest on older hosts
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

              # Fresh dir
              if (Test-Path $dest) { Remove-Item -Recurse -Force $dest }
              New-Item -ItemType Directory -Force -Path $dest | Out-Null

              # Download the embeddable zip
              Write-Host "Downloading $url ..."
              Invoke-WebRequest -Uri $url -OutFile $zip

              # Unzip (prefer Expand-Archive; fallback to .NET if needed)
              try {
                Expand-Archive -Path $zip -DestinationPath $dest -Force
              } catch {
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                # Some agents lack the 3-arg overload; do a replace if it exists, otherwise remove+extract.
                if ([System.IO.Compression.ZipFile].GetMethods().Name -contains 'ExtractToDirectory' -and
                    ([System.IO.Compression.ZipFile].GetMethods() | Where-Object { $_.Name -eq 'ExtractToDirectory' -and $_.GetParameters().Count -eq 3 })) {
                  [IO.Compression.ZipFile]::ExtractToDirectory($zip, $dest, $true)
                } else {
                  if (Test-Path $dest) { Remove-Item -Recurse -Force $dest }
                  New-Item -ItemType Directory -Force -Path $dest | Out-Null
                  [IO.Compression.ZipFile]::ExtractToDirectory($zip, $dest)
                }
              }

              # Enable site-packages by ensuring 'import site' is active in the *_pth file
              $pth = Get-ChildItem -Path $dest -Filter "python*._pth" | Select-Object -First 1
              if (-not $pth) {
                $pth = Join-Path $dest "python311._pth"
                # Minimal file enabling site
                Set-Content -Path $pth -Value "import site"
              } else {
                (Get-Content $pth.FullName) `
                  -replace '^\s*#\s*import site\s*$', 'import site' `
                  | Set-Content $pth.FullName
              }

              # Put Python and (later) Scripts on PATH for subsequent steps
              Write-Host "##vso[task.setvariable variable=PYTHON_HOME]$dest"
              Write-Host "##vso[task.prependpath]$dest"
              Write-Host "##vso[task.prependpath]$dest\Scripts"

              # Verify python.exe exists
              $py = Join-Path $dest "python.exe"
              if (-not (Test-Path $py)) {
                throw "python.exe not found in $dest after extraction."
              }

              # Bootstrap pip (embeddable doesn't include pip)
              $gp = Join-Path $root "get-pip.py"
              Write-Host "Downloading get-pip.py ..."
              Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile $gp

              # Some agents need -X utf8 to avoid path/encoding issues
              & $py $gp

              # Confirm pip works and shows location inside .python
              & $py -m pip --version
              & $py -m pip config list || Write-Host "pip config not set (that's OK)."

              Write-Host "Portable Python $ver installed successfully."
            displayName: "Install portable Python 3.11 (embeddable, robust)"
          - script: pip install -r ml/requirements.txt
            displayName: "Install dependencies"
          - script: pip install flake8 pytest
            displayName: "Install dev tools"
          - script: flake8 ml
            displayName: "Lint code"
          - script: pytest ml/tests
            displayName: "Run tests"
          - publish: ml
            artifact: ml_code

  - stage: ML_CD
    displayName: "Machine Learning CD"
    dependsOn: ML_CI
    condition: succeeded()
    jobs:
      - deployment: DeployToAML
        displayName: "Submit AML pipeline"
        environment: aml-prod
        pool:
          name: 'Default'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: ml_code
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: "3.11"
                - script: pip install -r ml/requirements.txt
                  displayName: "Install ML dependencies"
                - script: pip install azure-ai-ml
                  displayName: "Install Azure ML SDK"
                - script: |
                    python ml/pipeline/submit.py \
                      --workspace $(AML_WS) \
                      --resource-group $(AML_RG)
                  displayName: "Submit AML pipeline job"
