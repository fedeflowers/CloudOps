trigger:
  branches:
    include:
      - main
  paths:
    include:
      - MLOps/Azure/azure-mlops-project/ml/**
      - MLOps/Azure/azure-mlops-project/.azuredevops/pipelines/ml/**

variables:
  - group: dev_vars

stages:
  - stage: ML_CI
    displayName: "Machine Learning CI"
    jobs:
      - job: Build
        displayName: "Lint, test, and package ML code"
        pool:
          name: 'Default'
        steps:
          # Install depency step, runs on local Agent, AI generated script
          - powershell: |
              $ErrorActionPreference = 'Stop'

              # --- Settings ---
              $ver  = '3.11.9'
              $url  = "https://www.python.org/ftp/python/$ver/python-$ver-embed-amd64.zip"
              $root = "$(Build.SourcesDirectory)"
              $dest = Join-Path $root ".python"
              $zip  = Join-Path $root "python-$ver.zip"
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

              # Fresh install dir
              if (Test-Path $dest) { Remove-Item -Recurse -Force $dest }
              New-Item -ItemType Directory -Force -Path $dest | Out-Null

              # Download Python embeddable
              Write-Host "Downloading $url ..."
              Invoke-WebRequest -Uri $url -OutFile $zip

              # Unzip
              Expand-Archive -Path $zip -DestinationPath $dest -Force

              # Ensure 'import site' is enabled in the embeddable *_pth file
              $pth = Get-ChildItem -Path $dest -Filter "python*._pth" | Select-Object -First 1
              if (-not $pth) {
                $pth = Join-Path $dest "python311._pth"
                Set-Content -Path $pth -Value "import site"
              } else {
                (Get-Content $pth.FullName) `
                  -replace '^\s*#\s*import site\s*$', 'import site' `
                  | Set-Content $pth.FullName
              }

              # Put Python on PATH for later steps
              Write-Host "##vso[task.setvariable variable=PYTHON_HOME]$dest"
              Write-Host "##vso[task.prependpath]$dest"

              # Verify python.exe exists
              $py = Join-Path $dest "python.exe"
              if (-not (Test-Path $py)) { throw "python.exe not found in $dest" }

              # Bootstrap pip
              $gp = Join-Path $root "get-pip.py"
              Write-Host "Downloading get-pip.py ..."
              Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile $gp
              & $py $gp

              # Add Scripts to PATH (created by pip)
              $scripts = Join-Path $dest "Scripts"
              if (Test-Path $scripts) {
                Write-Host "##vso[task.prependpath]$scripts"
              }

              # Sanity check
              & $py -m pip --version
            displayName: "Install portable Python 3.11 (embeddable)"
          - script: pip install -r $(ml_code)/requirements.txt
            displayName: "Install dependencies"
          - script: pip install black isort autoflake flake8 pytest
            displayName: "Install dev tools"
          # 1) Clean imports & remove unused
          # - script: |
          #     autoflake --remove-all-unused-imports --remove-unused-variables --in-place -r $(ml_code)
          #     isort $(ml_code) --profile black
          #     black $(ml_code) --line-length 79
          #   displayName: "Auto-format (autoflake + isort + black)"
          # # 2) Lint
          # - script: flake8 $(ml_code)
          #   displayName: "Lint code"

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: ml_code


  - stage: ML_CD
    displayName: "Machine Learning CD"
    dependsOn: ML_CI
    condition: succeeded()
    jobs:
      - deployment: DeployToAML
        displayName: "Submit AML pipeline"
        environment: aml-prod
        pool:
          name: 'Default'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: ml_code
                - powershell: |
                    $ErrorActionPreference = 'Stop'

                    # --- Settings ---
                    $ver  = '3.11.9'
                    $url  = "https://www.python.org/ftp/python/$ver/python-$ver-embed-amd64.zip"
                    $root = "$(Build.SourcesDirectory)"
                    $dest = Join-Path $root ".python"
                    $zip  = Join-Path $root "python-$ver.zip"
                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                    # Fresh install dir
                    if (Test-Path $dest) { Remove-Item -Recurse -Force $dest }
                    New-Item -ItemType Directory -Force -Path $dest | Out-Null

                    # Download Python embeddable
                    Write-Host "Downloading $url ..."
                    Invoke-WebRequest -Uri $url -OutFile $zip

                    # Unzip
                    Expand-Archive -Path $zip -DestinationPath $dest -Force

                    # Ensure 'import site' is enabled in the embeddable *_pth file
                    $pth = Get-ChildItem -Path $dest -Filter "python*._pth" | Select-Object -First 1
                    if (-not $pth) {
                      $pth = Join-Path $dest "python311._pth"
                      Set-Content -Path $pth -Value "import site"
                    } else {
                      (Get-Content $pth.FullName) `
                        -replace '^\s*#\s*import site\s*$', 'import site' `
                        | Set-Content $pth.FullName
                    }

                    # Put Python on PATH for later steps
                    Write-Host "##vso[task.setvariable variable=PYTHON_HOME]$dest"
                    Write-Host "##vso[task.prependpath]$dest"

                    # Verify python.exe exists
                    $py = Join-Path $dest "python.exe"
                    if (-not (Test-Path $py)) { throw "python.exe not found in $dest" }

                    # Bootstrap pip
                    $gp = Join-Path $root "get-pip.py"
                    Write-Host "Downloading get-pip.py ..."
                    Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile $gp
                    & $py $gp

                    # Add Scripts to PATH (created by pip)
                    $scripts = Join-Path $dest "Scripts"
                    if (Test-Path $scripts) {
                      Write-Host "##vso[task.prependpath]$scripts"
                    }

                    # Sanity check
                    & $py -m pip --version
                  displayName: "Install portable Python 3.11 (embeddable)"
                - script: pip install -r  $(ml_code)/requirements.txt
                  displayName: "Install ML dependencies"
                - script: pip install azure-ai-ml
                  displayName: "Install Azure ML SDK"
                - task: PythonScript@0
                  displayName: "Submit AML pipeline job"
                  inputs:
                    scriptSource: filePath
                    scriptPath: $(Build.SourcesDirectory)/MLOps/Azure/azure-mlops-project/ml/tools/submit_training.py
